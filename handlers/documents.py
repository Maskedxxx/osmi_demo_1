import os
import tempfile
import aiohttp
import re
from datetime import datetime
from aiogram import types, Bot

from services.ocr_service import process_pdf_ocr, save_ocr_result
from services.semantic_page_filter import analyze_document_from_json
from services.vlm_page_cleaner import VLMPageCleaner
from services.defect_analyzer import analyze_vlm_cleaned_pages_with_excel
from config import logger, DEFECT_SEARCH_UTTERANCES, DEFECT_ANALYSIS_SCORE_THRESHOLD, DEFECT_ANALYSIS_TOP_PAGES


async def handle_upload_document(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'"""
    await message.answer(
        "üîç **–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞, "
        "–∏ —è –≤—ã–ø–æ–ª–Ω—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n\n"
        "üìÑ **1. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞** - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
        "üéØ **2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏\n"
        "üñºÔ∏è **3. VLM –æ—á–∏—Å—Ç–∫–∞** - —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞\n"
        "ü§ñ **4. LLM –∞–Ω–∞–ª–∏–∑** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "üìä **5. Excel –æ—Ç—á–µ—Ç** - –≥–æ—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤\n\n"
        "üí° **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:**\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª—ã (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â:\n"
        "  - Google Drive\n"
        "  - Dropbox\n"
        "  - –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫",
        parse_mode="Markdown"
    )


async def handle_pdf_document(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    if not message.document:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
    if not message.document.file_name.lower().endswith('.pdf'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω PDF —Ñ–∞–π–ª: {message.document.file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        file_info = await bot.get_file(message.document.file_id)
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            temp_path = temp_file.name
            await bot.download_file(file_info.file_path, temp_file)
        
        logger.info(f"PDF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.edit_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        document_data, processing_time = await process_pdf_ocr(temp_path, message.document.file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É result/
        json_file, txt_file = await save_ocr_result(document_data)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {temp_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
        total_elements = sum(page.total_elements for page in document_data.pages)
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OCR - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(document_data.get_elements_by_category('Title'))}")
        logger.info(f"üìù –°–ø–∏—Å–∫–æ–≤: {len(document_data.get_elements_by_category('ListItem'))}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {len(document_data.get_elements_by_category('NarrativeText'))}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        result_text = "‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        result_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document_data.filename}\n"
        result_text += f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {document_data.total_pages}\n"
        result_text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫\n"
        result_text += f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json_file}\n"
        result_text += f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {txt_file}"
        
        await processing_message.edit_text(result_text)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {message.document.file_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        
        await processing_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{str(e)}"
        )


async def download_file_from_url(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    direct_url = get_direct_download_url(url)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(direct_url) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status}")
                
                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                    temp_path = temp_file.name
                    async for chunk in response.content.iter_chunked(8192):
                        temp_file.write(chunk)
                
                logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏–∑ URL –≤: {temp_path}")
                return temp_path
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise


def get_direct_download_url(url: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –≤ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏"""
    
    # Google Drive
    if "drive.google.com" in url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        file_id_match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if file_id_match:
            file_id = file_id_match.group(1)
            return f"https://drive.google.com/uc?export=download&id={file_id}"
    
    # Dropbox
    elif "dropbox.com" in url:
        # –ó–∞–º–µ–Ω—è–µ–º dl=0 –Ω–∞ dl=1 –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return url.replace("dl=0", "dl=1")
    
    # Yandex Disk
    elif "disk.yandex" in url:
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return url
    
    # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
    return url


async def handle_url_document(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    
    url = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {url} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_message = await message.answer("üîÑ –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
        temp_path = await download_file_from_url(url)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.edit_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"document_{timestamp}.pdf"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        document_data, processing_time = await process_pdf_ocr(temp_path, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É result/
        json_file, txt_file = await save_ocr_result(document_data)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {temp_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
        total_elements = sum(page.total_elements for page in document_data.pages)
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OCR - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(document_data.get_elements_by_category('Title'))}")
        logger.info(f"üìù –°–ø–∏—Å–∫–æ–≤: {len(document_data.get_elements_by_category('ListItem'))}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {len(document_data.get_elements_by_category('NarrativeText'))}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_text = "‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        result_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document_data.filename}\n"
        result_text += f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {document_data.total_pages}\n"
        result_text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫\n"
        result_text += f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json_file}\n"
        result_text += f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {txt_file}"
        
        await processing_message.edit_text(result_text)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ URL: {url}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        
        await processing_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{str(e)}"
        )


async def handle_analyze_defects_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze_defects"""
    await message.answer(
        "üîç **–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞, "
        "–∏ —è –≤—ã–ø–æ–ª–Ω—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n\n"
        "üìÑ **1. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞** - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
        "üéØ **2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏\n"
        "üñºÔ∏è **3. VLM –æ—á–∏—Å—Ç–∫–∞** - —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞\n"
        "ü§ñ **4. LLM –∞–Ω–∞–ª–∏–∑** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "üìä **5. Excel –æ—Ç—á–µ—Ç** - –≥–æ—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª—ã (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â",
        parse_mode="Markdown"
    )


async def handle_full_defect_analysis(message: types.Message, bot: Bot):
    """
    –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤:
    1. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    3. VLM –æ—á–∏—Å—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    4. LLM –∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤
    5. –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞)
    is_file = bool(message.document)
    is_url = bool(message.text and ("http" in message.text or "drive.google.com" in message.text))
    
    if not (is_file or is_url):
        await message.answer(
            "‚ùå –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze_defects –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if is_file and not message.document.file_name.lower().endswith('.pdf'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    progress_message = await message.answer("üöÄ **–ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤...**", parse_mode="Markdown")
    
    temp_path = None
    
    try:
        # ========== –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ ==========
        await progress_message.edit_text("üìÑ **–≠—Ç–∞–ø 1/5:** –ó–∞–≥—Ä—É–∑–∫–∞ –∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...", parse_mode="Markdown")
        
        if is_file:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_info = await bot.get_file(message.document.file_id)
            
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                temp_path = temp_file.name
                await bot.download_file(file_info.file_path, temp_file)
            
            original_filename = message.document.file_name
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {original_filename}")
            
        else:  # is_url
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
            temp_path = await download_file_from_url(message.text.strip())
            original_filename = f"document_from_url_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            logger.info(f"–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ: {message.text.strip()}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        document_data, processing_time = await process_pdf_ocr(temp_path, original_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        json_file, txt_file = await save_ocr_result(document_data)
        
        logger.info(f"OCR –∑–∞–≤–µ—Ä—à–µ–Ω: {document_data.total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {processing_time:.1f}—Å")
        
        # ========== –≠–¢–ê–ü 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ==========
        await progress_message.edit_text("üéØ **–≠—Ç–∞–ø 2/5:** –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ—Ñ–µ–∫—Ç–æ–≤...", parse_mode="Markdown")
        
        relevant_pages = await analyze_document_from_json(
            json_path=json_file,
            utterances=DEFECT_SEARCH_UTTERANCES,
            score_threshold=DEFECT_ANALYSIS_SCORE_THRESHOLD,
            top_limit=DEFECT_ANALYSIS_TOP_PAGES
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        sorted_relevant_pages = sorted(set(relevant_pages))

        if not sorted_relevant_pages:
            await progress_message.edit_text(
                "‚ö†Ô∏è **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º**\n\n"
                "–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.\n"
                f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {document_data.total_pages}\n"
                f"üîç –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {DEFECT_ANALYSIS_SCORE_THRESHOLD}\n\n"
                "üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏–ª–∏ "
                "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.",
                parse_mode="Markdown"
            )
            return
        
        logger.info(
            "–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: %d (–ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: %d) - %s (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %s)",
            len(relevant_pages),
            len(sorted_relevant_pages),
            relevant_pages,
            sorted_relevant_pages,
        )

        # ========== –≠–¢–ê–ü 3: VLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ==========
        await progress_message.edit_text("üñºÔ∏è **–≠—Ç–∞–ø 3/5:** VLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...", parse_mode="Markdown")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VLM –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å
        vlm_cleaner = VLMPageCleaner()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ VLM
        from pathlib import Path
        vlm_result = vlm_cleaner.process_pages(Path(temp_path), sorted_relevant_pages)
        
        logger.info(f"VLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {vlm_result.processed_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        # ========== –≠–¢–ê–ü 4: LLM –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel ==========
        await progress_message.edit_text("ü§ñ **–≠—Ç–∞–ø 4/5:** –ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel...", parse_mode="Markdown")
        
        excel_path = await analyze_vlm_cleaned_pages_with_excel(
            vlm_result=vlm_result,
            output_path=None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        )
        
        logger.info(f"Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_path}")
        
        # ========== –≠–¢–ê–ü 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ==========
        await progress_message.edit_text("üìä **–≠—Ç–∞–ø 5/5:** –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...", parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(excel_path, 'rb') as excel_file:
            excel_document = types.BufferedInputFile(
                excel_file.read(),
                filename=f"defect_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            )
            
            await message.answer_document(
                excel_document,
                caption=(
                    f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** {document_data.filename}\n"
                    f"üìñ **–°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {document_data.total_pages}\n"
                    f"üéØ **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö:** {len(sorted_relevant_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                    f"‚è±Ô∏è **–í—Ä–µ–º—è OCR:** {processing_time:.1f} —Å–µ–∫\n\n"
                    f"üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç:** Excel —Ç–∞–±–ª–∏—Ü–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö"
                ),
                parse_mode="Markdown"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_message.delete()
        
        logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {e}")
        
        await progress_message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="Markdown"
        )
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if temp_path and os.path.exists(temp_path):
            os.unlink(temp_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_path}")
