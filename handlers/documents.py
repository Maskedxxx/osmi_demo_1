"""–•–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤."""

from __future__ import annotations

from aiogram import Bot, types

from config import logger
from services.pipeline_runner import (
    DefectAnalysisPipeline,
    PipelineError,
    extract_google_drive_file_id,
    format_size,
)


async def handle_upload_document(message: types.Message) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π."""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ PDF –∏–∑ Google Drive.\n\n"
        "–ü–∞–π–ø–ª–∞–π–Ω –≤–∫–ª—é—á–∞–µ—Ç 4 —à–∞–≥–∞:"
        "\n1Ô∏è‚É£ OCR (~4-5 –º–∏–Ω—É—Ç)"
        "\n2Ô∏è‚É£ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (~30 —Å–µ–∫—É–Ω–¥)"
        "\n3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Vision LM (~1-2 –º–∏–Ω—É—Ç—ã)"
        "\n4Ô∏è‚É£ –¢–∞–±–ª–∏—Ü–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (~1 –º–∏–Ω—É—Ç–∞)"
        "\n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∫–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
    )


def is_google_drive_link_message(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É Google Drive —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Ñ–∞–π–ª–∞."""
    text = (message.text or "").strip()
    return bool(extract_google_drive_file_id(text))


def format_cost(usage: dict | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å LLM-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not usage:
        return "–Ω/–¥"
    cost = usage.get("cost_usd")
    if cost is None:
        return "–Ω/–¥"
    return f"${cost:.4f}"


async def handle_full_defect_analysis(message: types.Message, _bot: Bot) -> None:
    """–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    link = (message.text or "").strip()
    if not extract_google_drive_file_id(link):
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ "
            "https://drive.google.com/file/d/<ID>/view –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

    pipeline = DefectAnalysisPipeline(link)

    await message.answer("‚òÅÔ∏è –ü—Ä–∏–Ω—è–ª —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

    try:
        download_meta = await pipeline.download_document()
        await message.answer(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.\n"
            f"üìÑ –ò–º—è: {download_meta.filename}\n"
            f"üì¶ –†–∞–∑–º–µ—Ä: {format_size(download_meta.size_bytes)}\n"
            f"üóÇÔ∏è –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {pipeline.pipeline_dir.name}"
        )

        await message.answer(
            "üöÄ –®–∞–≥ 1/4: OCR –¥–æ–∫—É–º–µ–Ω—Ç–∞. –≠—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 4-5 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        ocr_meta = await pipeline.run_ocr()
        await message.answer(
            "‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ocr_meta.document.total_pages}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —à–∞–≥–∞: {ocr_meta.duration:.1f} —Å–µ–∫\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2."
        )

        await message.answer(
            "üéØ –®–∞–≥ 2/4: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (~30 —Å–µ–∫—É–Ω–¥)."
        )
        semantic_meta = await pipeline.run_semantic_analysis()
        if not semantic_meta.relevant_pages:
            await message.answer(
                "‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ—Ñ–µ–∫—Ç–æ–≤."
                " –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
            return

        pages_str = ", ".join(str(page) for page in semantic_meta.relevant_pages)
        await message.answer(
            "‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            f"üìë –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {len(semantic_meta.relevant_pages)}\n"
            f"üóÇÔ∏è –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {pages_str}\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3."
        )

        await message.answer(
            "üßπ –®–∞–≥ 3/4: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Vision LM (~1-2 –º–∏–Ω—É—Ç—ã)."
        )
        vlm_meta = await pipeline.run_vlm_cleaning()
        await message.answer(
            "‚úÖ –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            f"üßæ –°—Ç—Ä–∞–Ω–∏—Ü –æ—á–∏—â–µ–Ω–æ: {vlm_meta.processed_pages}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —à–∞–≥–∞: {vlm_meta.duration:.1f} —Å–µ–∫\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 4."
        )

        await message.answer(
            "üìä –®–∞–≥ 4/4: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (~1 –º–∏–Ω—É—Ç–∞)."
        )
        analysis_meta = await pipeline.run_analysis_and_report()

        await message.answer(
            "‚úÖ –®–∞–≥ 4 –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é Excel —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ —Å–≤–æ–¥–∫—É –ø–æ –ø–∞–π–ø–ª–∞–π–Ω—É."
        )

        total_duration = pipeline.total_duration()
        cost_text = format_cost(analysis_meta.llm_usage)
        relevant_pages = ", ".join(str(page) for page in semantic_meta.relevant_pages)

        with open(analysis_meta.excel_path, "rb") as excel_file:
            excel_document = types.BufferedInputFile(
                excel_file.read(),
                filename=analysis_meta.excel_path.name,
            )
            await message.answer_document(
                excel_document,
                caption=(
                    "‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                    f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {ocr_meta.document.filename}\n"
                    f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü OCR: {ocr_meta.document.total_pages}\n"
                    f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {relevant_pages}\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {total_duration:.1f} —Å–µ–∫\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å LLM —à–∞–≥–∞: {cost_text}\n"
                    f"üóÇÔ∏è –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {pipeline.pipeline_dir.name}"
                ),
            )

    except PipelineError as error:
        logger.warning("–ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", error)
        await message.answer(f"‚ùå {error}")
    except Exception as error:  # noqa: BLE001
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞", exc_info=error)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
