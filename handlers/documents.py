import os
import tempfile
import aiohttp
import re
from datetime import datetime
from aiogram import types, Bot

from services.ocr_service import process_pdf_ocr, save_ocr_result
from config import logger


async def handle_upload_document(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª) –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n"
        "üìé –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞:\n"
        "  - Google Drive\n"
        "  - Dropbox\n"
        "  - –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"
    )


async def handle_pdf_document(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    if not message.document:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
    if not message.document.file_name.lower().endswith('.pdf'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω PDF —Ñ–∞–π–ª: {message.document.file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        file_info = await bot.get_file(message.document.file_id)
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            temp_path = temp_file.name
            await bot.download_file(file_info.file_path, temp_file)
        
        logger.info(f"PDF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.edit_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        document_data, processing_time = await process_pdf_ocr(temp_path, message.document.file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É result/
        json_file, txt_file = await save_ocr_result(document_data)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {temp_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
        total_elements = sum(page.total_elements for page in document_data.pages)
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OCR - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(document_data.get_elements_by_category('Title'))}")
        logger.info(f"üìù –°–ø–∏—Å–∫–æ–≤: {len(document_data.get_elements_by_category('ListItem'))}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {len(document_data.get_elements_by_category('NarrativeText'))}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        result_text = "‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        result_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document_data.filename}\n"
        result_text += f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {document_data.total_pages}\n"
        result_text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫\n"
        result_text += f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json_file}\n"
        result_text += f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {txt_file}"
        
        await processing_message.edit_text(result_text)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {message.document.file_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        
        await processing_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{str(e)}"
        )


async def download_file_from_url(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    direct_url = get_direct_download_url(url)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(direct_url) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status}")
                
                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                    temp_path = temp_file.name
                    async for chunk in response.content.iter_chunked(8192):
                        temp_file.write(chunk)
                
                logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏–∑ URL –≤: {temp_path}")
                return temp_path
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise


def get_direct_download_url(url: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –≤ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏"""
    
    # Google Drive
    if "drive.google.com" in url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        file_id_match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if file_id_match:
            file_id = file_id_match.group(1)
            return f"https://drive.google.com/uc?export=download&id={file_id}"
    
    # Dropbox
    elif "dropbox.com" in url:
        # –ó–∞–º–µ–Ω—è–µ–º dl=0 –Ω–∞ dl=1 –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return url.replace("dl=0", "dl=1")
    
    # Yandex Disk
    elif "disk.yandex" in url:
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return url
    
    # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
    return url


async def handle_url_document(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    
    url = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {url} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_message = await message.answer("üîÑ –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
        temp_path = await download_file_from_url(url)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.edit_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"document_{timestamp}.pdf"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
        document_data, processing_time = await process_pdf_ocr(temp_path, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É result/
        json_file, txt_file = await save_ocr_result(document_data)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {temp_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
        total_elements = sum(page.total_elements for page in document_data.pages)
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OCR - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
        logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(document_data.get_elements_by_category('Title'))}")
        logger.info(f"üìù –°–ø–∏—Å–∫–æ–≤: {len(document_data.get_elements_by_category('ListItem'))}")
        logger.info(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {len(document_data.get_elements_by_category('NarrativeText'))}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_text = "‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        result_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document_data.filename}\n"
        result_text += f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {document_data.total_pages}\n"
        result_text += f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫\n"
        result_text += f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json_file}\n"
        result_text += f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {txt_file}"
        
        await processing_message.edit_text(result_text)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ URL: {url}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        
        await processing_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{str(e)}"
        )