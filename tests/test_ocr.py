"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç unstructured –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ —Å Pydantic –º–æ–¥–µ–ª—è–º–∏
"""

from pathlib import Path
from typing import Dict, List, Any
from unstructured.partition.pdf import partition_pdf

from models import TextElement, PageData, DocumentData


def process_pdf_with_pydantic(pdf_path: str, max_pages: int = None) -> DocumentData:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫—É PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic –º–æ–¥–µ–ª–µ–π
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        max_pages (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        DocumentData: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {pdf_path}")
    
    # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    elements = partition_pdf(
        filename=pdf_path,
        strategy="hi_res",  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        extract_image_block_to_payload=False,  # –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        infer_table_structure=False,
        languages=["rus"]
    )
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Pydantic –º–æ–¥–µ–ª–µ–π
    pages_data = {}
    
    for element in elements:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_number = getattr(element.metadata, "page_number", 1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
        if max_pages and page_number > max_pages:
            continue
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        if page_number not in pages_data:
            pages_data[page_number] = []
        
        # –°–æ–∑–¥–∞—ë–º TextElement –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if element.text.strip():
            text_element = TextElement(
                category=element.category,
                content=element.text.strip(),
                type="text"
            )
            pages_data[page_number].append(text_element)
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ PageData
    pages = []
    for page_num in sorted(pages_data.keys()):
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        full_page_text = " ".join([element.content for element in pages_data[page_num]])
        
        page_data = PageData(
            page_number=page_num,
            full_text=full_page_text,
            elements=pages_data[page_num],
            total_elements=len(pages_data[page_num])
        )
        pages.append(page_data)
    
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç DocumentData
    document = DocumentData(
        filename=Path(pdf_path).name,
        total_pages=len(pages),
        pages=pages
    )
    
    return document


def test_pdf_ocr():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR
    """
    
    # –£–ö–ê–ñ–ò–¢–ï –ó–î–ï–°–¨ –ü–£–¢–¨ –ö –í–ê–®–ï–ú–£ PDF –§–ê–ô–õ–£
    pdf_file_path = "tests/data/doc_demo_5_6.pdf"  # <-- –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å
    
    pdf_file = Path(pdf_file_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not pdf_file.exists():
        print(f"‚ùå –§–∞–π–ª {pdf_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π pdf_file_path")
        return
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {pdf_file.name}")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result_folder = Path(__file__).parent / "test_results"
        result_folder.mkdir(exist_ok=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Pydantic –º–æ–¥–µ–ª–µ–π
        document = process_pdf_with_pydantic(str(pdf_file), max_pages=3)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document.filename}")
        print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {document.total_pages}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        for page in document.pages:
            print(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page.page_number}: {page.total_elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
            text_preview = page.full_text[:200]
            if len(page.full_text) > 200:
                text_preview += "..."
            print(f"  –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_preview}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            print("  –≠–ª–µ–º–µ–Ω—Ç—ã:")
            for i, element in enumerate(page.elements[:3]):
                content_preview = element.content[:80]
                if len(element.content) > 80:
                    content_preview += "..."
                print(f"    {i+1}. [{element.category}]: {content_preview}")
            
            if page.total_elements > 3:
                print(f"    ... –∏ –µ—â—ë {page.total_elements - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —á–µ—Ä–µ–∑ Pydantic –≤ –ø–∞–ø–∫—É test_results
        output_file = result_folder / f"pydantic_result_{pdf_file.stem}.json"
        with open(output_file, "w", encoding="utf-8") as f:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ model_dump_json() –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            f.write(document.model_dump_json(indent=2))
        
        print(f"üìÑ Pydantic —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Pydantic –º–æ–¥–µ–ª–µ–π
        print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ 'Title': {len(document.get_elements_by_category('Title'))}")
        print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ 'ListItem': {len(document.get_elements_by_category('ListItem'))}")
        print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ 'NarrativeText': {len(document.get_elements_by_category('NarrativeText'))}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ –ø–∞–ø–∫—É test_results
        text_output_file = result_folder / f"full_text_{pdf_file.stem}.txt"
        with open(text_output_file, "w", encoding="utf-8") as f:
            f.write(document.get_all_text())
        print(f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {text_output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_file.name}: {e}")


if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    test_pdf_ocr()